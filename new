print("Hello World!!!")
print("你好世界!")


print(65)
print(13.2)
print("你好")


# 单行注释

"""
    多行
    注释
    。
"""


money = 66 ** 6
print("钱包还有: ",money)
# 买了一个鼠脖，money-9999999999
print("钱包还有: ",money-9999999999,"元")


# 方法一:使用print直接输出类型信息
print(type("你好"))
print(type(123))
print(type(10.2))
# 方式二:使用变量存储type()语句的结果
n = type(123)
print(n)
# 方式三:使用type()语句,查看变量中存储的数据类型信息
n = 10
print(type(n))


num_str = str(11)
print(type(num_str),num_str)

float_str = str(11.345)
print(type(float_str),float_str)

n1 = int("11")
print(type(n1),n1)

n2 = float("12.456")
print(type(n2),n2)

# error
# n3 = int("10.223")
# print(type(n3),n3)

# error
# n4 = int("ab")
# print(type(n4),n4)

n5 = int(120.913)
print(type(n5),n5)
n5 = float(n5)
print(type(n5),n5)


print("2 + 3 = ",2 + 3)
print("9 - 5 = ",9 - 5)
print("2 * 3 = ",2 * 3)
print("2 / 3 = ",2 / 3)
print("7 / 3 = ",7 / 3)
print("6 / 3 = ",6 / 3)
print("8 // 3 = ",8 // 3)
print("2 ** 3 = ",2 ** 3)


n = 5
print("n = ",n)
n += 3
print("n += 3: ",n)
n -= 4
print("n -= 4: ",n)
n //= 3
print("n //= 3: ",n)
n *= 5
print("n *= 5: ",n)
n **= 2
print("n **= 2: ",n)
n /= 3
print("n /= 3: ",n)


s1 = '你好'
print(type(s1),'\'你好\'')
s2 = "你好"
print(type(s2),"\"你好\"")
s3 = """
你
好
"""
print(type(s3),"\"\"\"\n\
你\n\
好\n\
\"\"\"")


s1 = '"a","b",\'c\\d'
print(s1)
s2 = "'a',\"b\",\\c\""
print(s2)


print("今天"+"是"+'星期二')
print("今天","是","星期二")


# TypeError: can only concatenate str (not "int") to str
print("age :" + 100)


s1 = "人在天涯鬓已斑。"
s2 = "江南几度梅花发,%s" %s1
print(s2)


s1 = "羌笛"
s2 = "杨柳"
s3 = "玉门关"
s4 = "%s何须怨%s春风不度%s" % (s1,s2,s3)
print(s4)


print("重拾旧山河,%s" % "朝天阙")

print("name:%s age:%d money:%f" % ("fm",19,666666.666))


n = 5
m = 7
f = 6.6
print("""n\
 =%4d
m =%-5d'a'
f =%6.3f\
""" % (n,m,f))

#精度限制的同时也会进行四舍五入
n1 = 5.5
print("1)",n1)
print("n1 = %.0f\n" % n1)

n1 = 5.55
print("2)",n1)
print("n1 = %.0f" % n1)
print("n1 = %.1f\n" % n1)

n1 = 5.56
print(n1)
print("n1 = %.0f" % n1)
print("n1 = %.1f\n" % n1)

n1 = 5.555
print("3)",n1)
print("n1 = %.0f" % n1)
print("n1 = %.1f" % n1)
print("n1 = %.2f\n" % n1)


name = "guojiao"
birth = 1973
alcohol_content = 66.696
print(f"名字:{name}\n成立于:{birth}\n酒精度数:{alcohol_content}")


print("2 * 3 = %d" % (2 * 3))
print(f"8 ** 2 = {8 ** 2}")
print("type(str) = %s" % type("23"))

print("2 * 3 = %d" % 6)
print(f"8 ** 2 = {64}")
print("type(str) = %s" % "<class 'str'>")


s1 = input("输入今天的日期:")
print(f"今天是:{s1}")


n1 = int(input("输入一个整形number:"))
print(f"The number is: {n1}")


result = 9 > 5
print(f"9 > 5 的结果是: {result},类型是:{type(result)}")
result = "haha" == "haa"
print(f"字符串haha与haa是否相等,结果是: {result},类型是: {type(result)}")


b1 = True
b2 = False
print(f"b1 的内容是: {b1},类型是: {type(b1)}")
print(f"b2 的内容是: {b2},类型是: {type(b1)}")


n = int(float(input("input num:")))
if n > 100 :
    print('num > 100')
else :
    print("num < 100")
print("num is",n)


import random
n = random.randint(1,100)
count = 0
flag = True
while flag :
    k = int(input("猜数字(1..100):"))
    count += 1
    if k == n :
        print("yes")
        flag = False
    elif k > n :
        print("大了")
    elif k < n :
        print("小了")
print("count:",count)


print("Hello ",end = '')
print("World!",end = '\n\n')

print("abc def")
print("abcde fgh\n")

print("abc\tdef")
print("abcde\tfgh\n")


i = 1
while i <= 9 :
    k = 1
    while k <= i :
        print(f"{k}*{i}={k*i}\t",end = '')
        #print("%d*%d=%-3d" % (k,i,k*i),end = '')
        k += 1
    i += 1
    print()
    #print("\n",end = '')


s = "abcde"
for i in s :
    print(i)


s = "Most of us compare ourselves with anyone we think is happier"
count = 0
for i in s :
    if i == 'o' :
        count += 1
print("count = ",count)


for i in range(5) :
    print(i,end = ' ')

for i in range(5,10,2) :
    print(i,end = ' ')

for i in range(3):
    print("ahhah")

# python --- ok    C --- error
for i in range(5):
    print(i,end = ' ')
print("")
print(i)


for i in range(1,10):
    for k in range(1,i + 1):
        print("%d*%d=%-3d" % (k,i,k*i),end = '')
    print()


for i in range(4):
    print("i =",i  )
    print("a")
    if i > 1:
        continue
    print("b")


for i in range(10):
    if i > 5:
        continue
    print("i =",i)

for i in range(10):
    print("i =",i)
    if i > 5:
        break


#continue 与 break 只对所在的循环生效(不会对所在循环的外层循环生效)    这里 C 与 python 是一样的
for i in "abc":
    for k in range(2):
        if i == 'b':
            break
        print(i)


import random
count = 0
while count < 10:
    n = random.randint(1,100)
    if n < 10:
        print(n,end = ' ')
        count += 1

*****************************************************************************************************************************
def my_hello():
    print("Hello World!")

my_hello()

------------------------------------------

def my_len(s):
    str(s)
    count = 0
    for i in s:
        count += 1
    print("len =",count)

s1 = 'abcdef'
my_len(s1)
my_len(input("input:"))

------------------------------------------

def my_add(n1,n2):
    print(f"{n1} + {n2} = {n1 + n2}")

my_add(4,9)

------------------------------------------

def fun1():
    print("a ",end = '')

def fun2():
    return 

def fun3():
    return None

print(fun1(),type(fun1()),type(fun1))
print(fun2(),type(fun2()),type(fun2))
print(fun3(),type(fun3()),type(fun3))

------------------------------------------

def func_b():
    print("b")

def func_a():
    print("a")
    func_b()
    print("c",end = '')

func_a()

------------------------------------------

num = 35

def fun_a():
    print(num)

def fun_b():
    num = 7
    print(num)

fun_a()
fun_b()
print(num)

------------------------------------------

num = 7
def fun_A():
    global num 
    num = 50

print(num)
fun_A()
print(num)

*****************************************************************************************************************************

list1 = ["a1","b2","c3","d4"]
print(list1,"\t",type(list1))
list2 = ["abc",123,12.33,True]
print(list2,"\t",type(list2))

------------------------------------------

my_list = [[1,2,3],[4,5,6]]
print(my_list,"\n",type(my_list))

------------------------------------------

name_list = ["Tom","Lily","Rose"]
print(name_list[0])
print(name_list[1])
print(name_list[2])

------------------------------------------

name_list = ["Tom","Lily","Rose"]
print(name_list[-1])
print(name_list[-2])
print(name_list[-3])

------------------------------------------

list1 = [["a","b"],["c","d"]]
print(list1[0][0],list1[0][1])
print(list1[1][0],list1[1][1])

------------------------------------------

mylist = ["a1","b2","c3","d4"]
index = mylist.index("c3")
print("c3在列表中的下标索引值是:%d" % (index))

------------------------------------------

mylist = ["a1","b2","c3","d4"]
print(mylist)
mylist[0] = "e5"
mylist[1] = "f6"
print("列表被修改元素值后,结果为:%s" % (mylist))

------------------------------------------

mylist = ["a1","b2","c3"]
print(mylist)
mylist.insert(1,"abcd")
print("列表插入元素后结果是:%s" % (mylist))

------------------------------------------

mylist = ["1","2","3"]
print(mylist)
mylist.append("6")
mylist.append(6)
print("列表在追加了元素后结果是:%s" % (mylist))
print(f"type(mylist[-1]):{type(mylist[-1])}\n\
type(mylist[-2]):{type(mylist[-2])}")

------------------------------------------

mylist = ["a1","b2","c3"]
mylist2 = ["d4","e5","f6"]
print(mylist)
mylist.extend(mylist2)
print(f"列表追加了一个新的列表后,结果是:{mylist}")

------------------------------------------

mylist = ['a1', 'b2', 'c3', 'd4']
print(mylist)
del mylist[3]
print(f"列表删除元素后,结果是:{mylist}")

------------------------------------------

mylist = ['a1', 'b2', 'c3']
print(mylist)
element = mylist.pop(1)
print(f"通过pop方法取出元素后列表内容:{mylist},取出的元素是:{element}")

------------------------------------------

mylist = ['a1', 'b2', 'a1', 'b2', 'c3']
print(mylist)
mylist.remove("b2")
print(f"通过remove方法移除元素后,列表内容:{mylist}")

------------------------------------------

mylist = ['a1', 'b2', 'a1', 'b2', 'c3']
print(mylist)
mylist.clear()
print(f"列表被清空了,结果是:{mylist}")

------------------------------------------

mylist = ['a1','b2','a1','b2','a1','c3']
count = mylist.count("a1")
print(f"列表中a1的数量是:{count}")

------------------------------------------

mylist = ['a1','b2','c3']
count = len(mylist)
print(f"列表的元素数量总共有:{count}个")

------------------------------------------

mylist = [22,25,21,23,22,20]
print(mylist)
mylist.append(31)
print(mylist)
mylist.extend([29,33,30])
print(mylist)
print(mylist[0],mylist[-1])
print(mylist.index(31))

------------------------------------------

def list_while_func (mylist):
    index = 0
    while index < len(mylist):
        print(mylist[index],end = ' ')
        index += 1
    print()

def list_for1_func (mylist):
    for index in range(0,len(mylist)):
        print(mylist[index],end = ' ')
    print()

def list_for2_func(mylist):
    for i in mylist:
        print(i,end = ' ')
    print()

my_list = [0,1,2,3,4,5,6,7,8,9]
list_while_func(my_list)
list_for1_func(my_list)
list_for2_func(my_list)

------------------------------------------

def list_even_while_func (list1):
    i = 0
    list2 = []
    while i < len(list1):
        if list1[i] % 2 == 0:
            list2.append(list1[i])
        i += 1
    print(list2)


def list_even_for_func (list1):
    list2 = []
    for i in list1:
        if i % 2 == 0:
            list2.append(i)
    print(list2)


list1 = [1,2,3,4,5,6,7,8,9,10]
list_even_while_func(list1)
list_even_for_func(list1)

*****************************************************************************************************************************

t1 = (1,"Hello",True)
t2 = ()
t3 = tuple()
print(f"t1的类型是:{type(t1)},内容是:{t1}")
print(f"t2的类型是:{type(t2)},内容是:{t2}")
print(f"t3的类型是:{type(t3)},内容是:{t3}")

------------------------------------------

#注意要点:
#定义一个元素的元组
t1 = ("Hello",) #注意:必须带有逗号,否则不是元组类型
t2 = ("Hello")
print(f"t1的类型是{type(t1)}")
print(f"t2的类型是{type(t2)}")


------------------------------------------

t1 = ((1,2,3),(4,5,6))
print(f"t1的类型是:{type(t1)},内容是:{t1}")

------------------------------------------

t1 = ((1,2,3),(4,5,6))
num = t1[1][-1]
print(num)

------------------------------------------

t1 = ("ab","cd","ef","gh")
index = t1.index("ef")
print(f"在元组t1中查找\'ef\'的下标是:{index}")

------------------------------------------

t1 = ("a","b","a","b","g")
count = t1.count("a")
print(f"在元组t1中统计\'a\'的数量有:{count}个")

------------------------------------------

t1 = ("a","b","a","b","g")
num = len(t1)
print(f"t1元组中的元素有:{num}个")


------------------------------------------

def tuple_while_func (t):
    i = 0
    print("while遍历_元组的元素有:",end = '')
    while i < len(t):
        print(t[i],end = ' ')
        i += 1
    print()


def tuple_for_func (t):
    print("for遍历_元组的元素有:",end = '')
    for i in t:
        print(i,end = ' ')
    print()

t1 = ("a","b","c","d","e","f")
tuple_while_func(t1)
tuple_for_func(t1)

------------------------------------------

t1 = ("a","b",["h","e"])
print(f"t1的内容是:{t1}")
t1[2][0] = "y"
t1[2][1] = "z"
print(f"t1的内容是:{t1}")

*****************************************************************************************************************************
s1 = "hello world"
c1 = s1[1]
c2 = s1[-3]
print(f"从字符串{s1}取下标为1的元素,值为:{c1}\n\
从字符串{s1}取下标为-3的元素,值为:{c2}")

------------------------------------------

s1 = "abc and def"
value = s1.index("and")
print(f"在字符串{s1}中查找\'and\',其起始下标是:{value}")

------------------------------------------

my_str = "abl a b cabc"
new_my_str = my_str.replace("ab","8")
print(f"将字符串\"{my_str}\",进行替换后得到:\"{new_my_str}\"")

------------------------------------------

my_str = "Be who you are on the inside"
my_str_list = my_str.split(" ")
print(f"将字符串{my_str}进行split切分后得到:\n\
{my_str_list},类型是:{type(my_str_list)}")

------------------------------------------

my_str = "     Liste to your heart   "
#print(my_str)
new_my_str = my_str.strip()   #不传入参数,去除首位空格
print(f"字符串:{my_str}被strip后,得到的结果是:{new_my_str}")

------------------------------------------

my_str = "1122True 111love 222prevails111222"
new_my_str = my_str.strip("12") #去除前后的"1" 与 "2"
print(f"字符串:{my_str}被strip后,得到的结果是:{new_my_str}")

------------------------------------------

my_str = "ab a b ab haab"
count = my_str.count("ab") 
print(f"字符串{my_str}中\"ab\"出现的次数是:{count}")

------------------------------------------

my_str = "ab a b ab haab"
num = len(my_str)
print(f"字符串\"{my_str}\"的长度是:{num}")

------------------------------------------

def str_while_func (s):
    n = 0
    while n < len(s):
        print(s[n],end = ' ')
        n += 1
    print()

def str_for_func (s):
    for i in s:
        print(i,end = ' ')
    print()

my_str = "abcdefg"
str_while_func(my_str)
str_for_func(my_str)

*****************************************************************************************************************************

my_list = [0,1,2,3,4,5,6]
result1 = my_list[1:4]
print(f"结果是1: {result1}")
result2 = my_list[3:1:-1]
print(f"结果是2: {result2}")

my_tuple = (0,1,2,3,4,5,6)
result3 = my_tuple[:]
print(f"结果是3: {result3}")
result4 = my_tuple[::-2]
print(f"结果是4: {result4}")

my_str = "01234567"
result6 = my_str[::2]
print(f"结果6:{result6}")
result7 = my_str[::-1]
print(f"结果7:{result7}")

------------------------------------------

#练习：
my_str = "夫君子之行,身修以静1,俭以养德"
#1.
result1 = my_str[::-1][6:10]
print(result1)
#2.
result2 = my_str[6:10][::-1]
print(result2)
#3.
result3 = my_str.split(",")[1].replace("1","")[::-1]
print(result3)

*****************************************************************************************************************************
#定义集合
my_set = {"a","b","c","a","c","e","f"}
my_set_empty = set()	#定义空集合
print(f"my_set的内容是:{my_set},类型是:{type(my_set)}")
print(f"my_set_empty的内容是:{my_set_empty},类型是:{type(my_set_empty)}")

------------------------------------------
#add	添加元素
my_set = {"a","b","b"}
my_set.add("pyhton")
my_set.add("a")
print(f"my_set添加元素后的结果是:{my_set}")

------------------------------------------
#remove
my_set = {"a","a","b","b","c"}
my_set.remove("b")
print(f"my_set移除\"b\"后,结果是:{my_set}")

------------------------------------------
#pop	随机去除一个元素
my_set = {"a","a","b","b","c"}
element = my_set.pop()
print(f"集合被取出元素是:‘{element}'取出元素后:{my_set}")

------------------------------------------
#clear	清空集合
my_set = {"a","a","b","b","c"}
my_set.clear()
print(f"集合被清空了,结果是:{my_set}")


------------------------------------------
#difference	取出差集
set1 = {1,2,3}
set2 = {1,5,6}
set3 = set1.difference(set2)
print(f"取出差集后的结果是:{set3}")
print(f"取出差集后,原有set1的内容:{set1}")
print(f"取出差集后,原有set2的内容:{set2}")

------------------------------------------
#difference_update 	消除差集
set1 = {1,2,3}
set2 = {1,5,6}
set1.difference_update(set2)
print(f"消除差集后,set1的内容:{set1}")
print(f"消除差集后,set2的内容:{set2}")

------------------------------------------
#union	交集
set1 = {1,2,3}
set2 = {1,5,6}
set3 = set1.union(set2)
print(f"两集合合并,结果是:{set3}")
print(f"合并后,set1的内容:{set1}")
print(f"合并后,set2的内容:{set2}")


------------------------------------------
#len	统计元素数量
set1 = {1,2,3,4,5,2,3,4,5}}
num = len(set1)
print(f"集合内的元素数量有:{num}个")

------------------------------------------
#集合的遍历
set1 = {1,2,3,4,1,2,3,5}
for element in set1:
	print(f"集合的元素有:{element}")

------------------------------------------

my_set = set()
for element in my_list:
	my_set.add(element)
print(f"列表的内容是:{my_list}")
print(f"通过for循环后,得到的集合对象是:{my_set}")

*****************************************************************************************************************************
#定义字典
my_dict = {"a":85,"b":72,"c":60}
#定义空字典
my_dict2 = {}
my_dict3 = dict()
print(f"字典1的内容是:{my_dict},类型是:{type(my_dict)}")
print(f"字典2的内容是:{my_dict2},类型是:{type(my_dict2)}")
print(f"字典3的内容是:{my_dict3},类型是:{type(my_dict3)}")

------------------------------------------
#定义重复key的字典(不报错,但尽最大条件做到不重复key)
my_dict1 = {"a":85,"b":72,"a":60}
print(f"重复key的字典的内容是:{my_dict1}")

------------------------------------------
#从字典中基于key获取value
my_dict1 = {"a":85,"b":72,"c":60}
score = my_dict1["a"]
print(f"key为\"a\"内容是:{score}")


------------------------------------------
#定义嵌套字典:
stu_score_dict = {
	"张三":{"语文":77,"数学":66,"英语":33},
	"李四":{"语文":88,"数学":86,"英语":55},
	"王五":{"语文":99,"数学":96,"英语":66}
}
print(f"学生的考试信息是:{stu_score_dict}")
#看一下张三的语文信息
score = stu_score_dict["张三"]["语文"]
print(f"张三的语文分数是:{score}分")
#看一下王五的英语信息
score = stu_score_dict["王五"]["英语"]
print(f"王五的英语分数是:{score}分")

------------------------------------------
#字典常见操作
my_dict = {"张三":99,"李四":88,"王五":77}
#新增元素
my_dict["刘六"] = 66
print(f"字典经过新增元素后,结果:{my_dict}")
#更新元素
my_dict["张三"] = 33
print(f"字典经过更新后,结果:{my_dict}")
#删除元素	pop
score = my_dict.pop("张三")
print(f"字典被移除了一个元素,结果:{my_dict},\"张三\"的考试分数是:{score}分")
#清空元素	clear
my_dict.clear()
print(f"字典被清空了,结果是:{my_dict}")
#获取字典全部的key
my_dict = {"张三":99,"李四":88,"王五":77}
keys = my_dict.keys()
print(f"字典的全部keys是:{keys}")
print("----------------------------------")
#遍历字典
#方式一:通过获取到全部的key来完成遍历
for key in my_dict.keys():
	print(f"字典的key是:{key},它对应的value是:{my_dict[key]}")
print("----------------------------------")
#方式二:直接对字典进行for循环,每一次循环都是直接得到key
for key in my_dict:
	print(f"字典的key是:{key},它对应的value是:{my_dict[key]}")
print("----------------------------------")
#统计字典内的元素数量
num = len(my_dict)
print(f"字典中的元素数量有:{num}个")

------------------------------------------
#字典 练习:
#对级别为1的员工,级别+1，工资+1000
my_dict = {
	"刘一":{"部门":"科技部","工资":3000,"级别":1},
	"陈二":{"部门":"市场部","工资":5000,"级别":2},
	"张三":{"部门":"市场部","工资":7000,"级别":3},
	"李四":{"部门":"科技部","工资":4000,"级别":1},
	"王五":{"部门":"市场部","工资":6000,"级别":2},	
}
#1.
for name in my_dict:
	if my_dict[name]["级别"] == 1:
		my_dict_emp = my_dict[name]
		
		my_dict_emp["级别"] += 1
		my_dict_emp["工资"] +=  1000
		
		my_dict[name] = my_dict_emp
	print(my_dict[name])
print("111111111111")
#2.
for key in my_dict.keys():
	if my_dict[key]["级别"] == 1:
		my_dict[key]["级别"] += 1
		my_dict[key]["工资"] +=  1000
	print(my_dict[key])


*****************************************************************************************************************************
my_list = [1,2,3,4,5]
my_tuple = (1,2,3,4,5)
my_str = "abcdefg"
my_set = {1,2,3,4,5}
my_dict = {"key1":1,"key2":2,"key3":3,"key4":4,"key5":5}

#len元素个数
print(f"列表的元素个数有:{len(my_list)}个")
print(f"元组的元素个数有:{len(my_tuple)}个")
print(f"字符串的元素个数有:{len(my_str)}个")
print(f"集合的元素个数有:{len(my_set)}个")
print(f"字典的元素个数有:{len(my_dict)}个")
print()
#max最大元素
print(f"列表最大的元素是:{max(my_list)}")
print(f"元组最大的元素是:{max(my_tuple)}")
print(f"字符串最大的元素是:{max(my_str)}")
print(f"集合最大的元素是:{max(my_set)}")
print(f"字典最大的元素是:{max(my_dict)}")
print()
#min最小元素
print(f"列表最小的元素是:{min(my_list)}")
print(f"元组最小的元素是:{min(my_tuple)}")
print(f"字符串最小的元素是:{min(my_str)}")
print(f"集合最小的元素是:{min(my_set)}")
print(f"字典最小的元素是:{min(my_dict)}")
print()
#类型转换:容器转列表
print(f"列表转列表的结果是:{list(my_list)}")
print(f"元组转列表的结果是:{list(my_tuple)}")
print(f"字符串转列表的结果是:{list(my_str)}")
print(f"集合转列表的结果是:{list(my_set)}")
print(f"字典转列表的结果是:{list(my_dict)}")
print()
#类型转换:容器转元组 
print(f"列表转元组的结果是:{tuple(my_list)}")
print(f"元组转元组的结果是:{tuple(my_tuple)}")
print(f"字符串转元组的结果是:{tuple(my_str)}")
print(f"集合转元组的结果是:{tuple(my_set)}")
print(f"字典转元组的结果是:{tuple(my_dict)}")
print()
#类型转换:容器转字符串
print(f"列表转字符串的结果是:{str(my_list)}")
print(f"元组转字符串的结果是:{str(my_tuple)}")
print(f"字符串转字符串的结果是:{str(my_str)}")
print(f"集合转字符串的结果是:{str(my_set)}")
print(f"字典转字符串的结果是:{str(my_dict)}")
print()
#类型转换:容器转集合
print(f"列表转集合的结果是:{set(my_list)}")
print(f"元组转集合的结果是:{set(my_tuple)}")
print(f"字符串转集合的结果是:{set(my_str)}")
print(f"集合转集合的结果是:{set(my_set)}")
print(f"字典转集合的结果是:{set(my_dict)}")
print()
#进行容器的排序
print(f"列表对象的排序结果是:{sorted(my_list)}")
print(f"元组对象的排序结果是:{sorted(my_tuple)}")
print(f"字符串对象的排序结果是:{sorted(my_str)}")
print(f"集合对象的排序结果是:{sorted(my_set)}")
print(f"字典对象的排序结果是:{sorted(my_dict)}")
print()
print(f"列表对象的排序结果是:{sorted(my_list,reverse=True)}")
print(f"元组对象的排序结果是:{sorted(my_tuple,reverse=True)}")
print(f"字符串对象的排序结果是:{sorted(my_str,reverse=True)}")
print(f"集合对象的排序结果是:{sorted(my_set,reverse=True)}")
print(f"字典对象的排序结果是:{sorted(my_dict,reverse=True)}")


*****************************************************************************************************************************
#字符串大小比较
#abc    比较    abd
print(f"abd大于abc,结果:{'abd' > 'abc'}")
#a  比较    ab
print(f"ab大于a,结果:{'ab' > 'a'}")
#a  比较    A
print(f"a大于A,结果:{'a' > 'A'}")
#key1   比较    key2
print(f"key1大于key2,结果:{'key2' > 'key1'}")
